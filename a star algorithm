from queue import PriorityQueue

def a_star_search(graph, start, goal):
    open_set = PriorityQueue()
    open_set.put((0, start))
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = heuristic(start, goal)

    while not open_set.empty():
        _, current = open_set.get()
        if current == goal:
            return reconstruct_path(came_from, current)

        for neighbor in graph[current]:
            tentative_g_score = g_score[current] + graph[current][neighbor]
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                open_set.put((f_score[neighbor], neighbor))

    return None

def heuristic(a, b):
    return abs(ord(a) - ord(b))

def reconstruct_path(came_from, current):
    total_path = [current]
    while current in came_from:
        current = came_from[current]
        total_path.append(current)
    return total_path[::-1]

graph = {
    'A': {'B': 1, 'C': 4, 'D': 6},
    'B': {'A': 1, 'C': 5, 'D': 2},
    'C': {'A': 4, 'B': 5, 'D': 3},
    'D': {'A': 6, 'B': 2, 'C': 3}
}

start = 'A'
goal = 'D'
path = a_star_search(graph, start, goal)
print("Path:", path)
